{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nconst $09e991522ca7e64e$var$gameField = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$scoreField = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$winMessage = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$initialState = Array.from({\n    length: $09e991522ca7e64e$var$gameField.tBodies[0].rows.length\n}, ()=>Array($09e991522ca7e64e$var$gameField.tBodies[0].rows[0].cells.length).fill(0));\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    static STATUSES = {\n        idle: \"idle\",\n        playing: \"playing\",\n        win: \"win\",\n        lose: \"lose\"\n    };\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ], gameBoard, scoreField){\n        this.initialState = initialState;\n        this.state = initialState.map((row)=>[\n                ...row\n            ]);\n        this.status = $a5fd07fa01589658$var$Game.STATUSES.idle;\n        this.score = 0;\n        this.gameBoard = gameBoard;\n        this.scoreField = scoreField;\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.STATUSES.playing;\n        this.#addCell();\n        this.#addCell();\n    }\n    restart() {\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.status = $a5fd07fa01589658$var$Game.STATUSES.idle;\n        this.score = 0;\n    }\n    moveLeft() {\n        if (this.status !== $a5fd07fa01589658$var$Game.STATUSES.playing) return;\n        let canMoveLeftInGroup = false;\n        this.state = this.state.map((row)=>{\n            if (!this.#canMoveInGroup(row)) return row;\n            canMoveLeftInGroup = true;\n            return this.#moveCellsInGroup(row);\n        });\n        if (canMoveLeftInGroup) this.#addCell();\n        this.#setStatus();\n    }\n    moveRight() {\n        if (this.status !== $a5fd07fa01589658$var$Game.STATUSES.playing) return;\n        let canMoveRightInGroup = false;\n        this.state = this.state.map((row)=>{\n            const rowReversed = [\n                ...row\n            ].reverse();\n            if (!this.#canMoveInGroup(rowReversed)) return row;\n            canMoveRightInGroup = true;\n            return this.#moveCellsInGroup(rowReversed).reverse();\n        });\n        if (canMoveRightInGroup) this.#addCell();\n        this.#setStatus();\n    }\n    moveUp() {\n        if (this.status !== $a5fd07fa01589658$var$Game.STATUSES.playing) return;\n        let canMoveUpInGroup = false;\n        const cellsGroupByColumns = this.#transpose(this.state);\n        const updatedCellsGroupByColumns = cellsGroupByColumns.map((row)=>{\n            if (!this.#canMoveInGroup(row)) return row;\n            canMoveUpInGroup = true;\n            return this.#moveCellsInGroup(row);\n        });\n        this.state = this.#transpose(updatedCellsGroupByColumns);\n        if (canMoveUpInGroup) this.#addCell();\n        this.#setStatus();\n    }\n    moveDown() {\n        if (this.status !== $a5fd07fa01589658$var$Game.STATUSES.playing) return;\n        let canMoveDownInGroup = false;\n        const cellsGroupByColumns = this.#transpose(this.state);\n        const updatedCellsGroupByColumns = cellsGroupByColumns.map((row)=>{\n            const reversedRow = [\n                ...row\n            ].reverse();\n            if (!this.#canMoveInGroup(reversedRow)) return row;\n            canMoveDownInGroup = true;\n            return this.#moveCellsInGroup(reversedRow).reverse();\n        });\n        this.state = this.#transpose(updatedCellsGroupByColumns);\n        if (canMoveDownInGroup) this.#addCell();\n        this.#setStatus();\n    }\n    updateGameBoard() {\n        const regex = /field-cell--\\d+/;\n        const currState = this.getState();\n        this.scoreField.innerText = this.getScore();\n        for(let i = 0; i < currState.length; i++)for(let j = 0; j < currState.length; j++){\n            if (currState[i][j] !== 0) {\n                this.gameBoard.rows[i].cells[j].className = `field-cell field-cell--${currState[i][j]}`;\n                this.gameBoard.rows[i].cells[j].innerText = currState[i][j];\n            } else if (currState[i][j] === 0 && regex.test(this.gameBoard.rows[i].cells[j].className)) {\n                this.gameBoard.rows[i].cells[j].className = \"field-cell\";\n                this.gameBoard.rows[i].cells[j].innerText = \"\";\n            }\n        }\n    }\n    #addCell() {\n        const coord = this.#getRandomEmptyCell();\n        if (coord !== null) this.state[coord[0]][coord[1]] = Math.random() < 0.9 ? 2 : 4;\n    }\n    #getEmptyCells() {\n        const emptyCells = [];\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[0].length; j++)if (this.state[i][j] === 0) emptyCells.push([\n                i,\n                j\n            ]);\n        }\n        return emptyCells;\n    }\n    #getRandomEmptyCell() {\n        const emptyCells = this.#getEmptyCells();\n        if (emptyCells.length < 1) return null;\n        const randomIndex = Math.floor(Math.random() * emptyCells.length);\n        return emptyCells[randomIndex];\n    }\n    #transpose(arr) {\n        return arr[0].map((_, colIndex)=>arr.map((row)=>row[colIndex]));\n    }\n    #moveCellsInGroup(group) {\n        const mergedValues = [\n            0,\n            0,\n            0,\n            0\n        ];\n        for(let i = 1; i < group.length; i++){\n            if (group[i] === 0) continue;\n            const cellWithNumIndex = i;\n            let targetCellIndex = null;\n            let j = i - 1;\n            while(j >= 0 && (group[j] === 0 || group[j] === group[cellWithNumIndex] && mergedValues[j] !== 1)){\n                targetCellIndex = j;\n                j--;\n            }\n            if (targetCellIndex === null) continue;\n            if (group[targetCellIndex] === 0) {\n                group[targetCellIndex] = group[cellWithNumIndex];\n                group[cellWithNumIndex] = 0;\n            } else {\n                group[targetCellIndex] += group[cellWithNumIndex];\n                group[cellWithNumIndex] = 0;\n                mergedValues[targetCellIndex] = 1;\n                this.score += group[targetCellIndex];\n            }\n        }\n        return group;\n    }\n    #setStatus() {\n        if (!this.#checkCanMove()) this.status = $a5fd07fa01589658$var$Game.STATUSES.lose;\n        if (this.#checkWin()) this.status = $a5fd07fa01589658$var$Game.STATUSES.win;\n    }\n    #checkWin() {\n        return this.state.some((row)=>{\n            return row.some((cell)=>cell === 2048);\n        });\n    }\n    #checkCanMove() {\n        const emptyCells = this.#getEmptyCells();\n        if (emptyCells.length >= 1) return true;\n        const canMoveHorisontal = this.state.some((row)=>{\n            const reversedRow = [\n                ...row\n            ];\n            if (this.#canMoveInGroup(row) || this.#canMoveInGroup(reversedRow)) return true;\n            return false;\n        });\n        const canMoveVertical = this.#transpose(this.state).some((row)=>{\n            const reversedRow = [\n                ...row\n            ];\n            if (this.#canMoveInGroup(row) || this.#canMoveInGroup(reversedRow)) return true;\n            return false;\n        });\n        return canMoveHorisontal || canMoveVertical;\n    }\n    #canMoveInGroup(group) {\n        return group.some((cell, index)=>{\n            if (index === 0) return false;\n            if (cell === 0) return false;\n            if (group[index - 1] === 0) return true;\n            if (group[index] === group[index - 1]) return true;\n            return false;\n        });\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports($09e991522ca7e64e$var$initialState, $09e991522ca7e64e$var$gameField.tBodies[0], $09e991522ca7e64e$var$scoreField);\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$button.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$button.classList.remove(\"start\");\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n        $09e991522ca7e64e$var$button.innerText = \"Restart\";\n        $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n    } else if ($09e991522ca7e64e$var$button.classList.contains(\"restart\")) {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$button.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$button.classList.add(\"start\");\n        $09e991522ca7e64e$var$button.innerText = \"Start\";\n        $09e991522ca7e64e$var$startMessage.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n    }\n    $09e991522ca7e64e$var$game.updateGameBoard();\n});\n$09e991522ca7e64e$var$setupInputOnce();\nfunction $09e991522ca7e64e$var$setupInputOnce() {\n    window.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleInput, {\n        once: true\n    });\n    $09e991522ca7e64e$var$setupTouchControls();\n}\nfunction $09e991522ca7e64e$var$handleInput(e) {\n    switch(e.key){\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        default:\n            $09e991522ca7e64e$var$setupInputOnce();\n            return;\n    }\n    $09e991522ca7e64e$var$updateGame();\n}\nfunction $09e991522ca7e64e$var$setupTouchControls() {\n    let touchStartX = 0;\n    let touchStartY = 0;\n    let touchEndX = 0;\n    let touchEndY = 0;\n    const threshold = 50;\n    window.addEventListener(\"touchstart\", (e)=>{\n        touchStartX = e.touches[0].clientX;\n        touchStartY = e.touches[0].clientY;\n    }, {\n        once: true\n    });\n    window.addEventListener(\"touchend\", (e)=>{\n        touchEndX = e.changedTouches[0].clientX;\n        touchEndY = e.changedTouches[0].clientY;\n        handleSwipe();\n    }, {\n        once: true\n    });\n    function handleSwipe() {\n        const deltaX = touchEndX - touchStartX;\n        const deltaY = touchEndY - touchStartY;\n        if (Math.abs(deltaX) > Math.abs(deltaY)) {\n            if (deltaX > threshold) $09e991522ca7e64e$var$game.moveRight();\n            else if (deltaX < -threshold) $09e991522ca7e64e$var$game.moveLeft();\n        } else {\n            if (deltaY > threshold) $09e991522ca7e64e$var$game.moveDown();\n            else if (deltaY < -threshold) $09e991522ca7e64e$var$game.moveUp();\n        }\n        $09e991522ca7e64e$var$updateGame();\n    }\n}\nfunction $09e991522ca7e64e$var$updateGame() {\n    $09e991522ca7e64e$var$game.updateGameBoard();\n    const resultStatus = $09e991522ca7e64e$var$game.getStatus();\n    if (resultStatus === $a5fd07fa01589658$exports.STATUSES.win) $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\");\n    if (resultStatus === $a5fd07fa01589658$exports.STATUSES.lose) $09e991522ca7e64e$var$loseMessage.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$setupInputOnce();\n}\n\n\n//# sourceMappingURL=index.eb7e8976.js.map\n","'use strict';\n\nconst gameField = document.querySelector('.game-field');\nconst scoreField = document.querySelector('.game-score');\nconst startMessage = document.querySelector('.message-start');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\nconst button = document.querySelector('.button');\n\nconst initialState = Array.from(\n  { length: gameField.tBodies[0].rows.length },\n  () => Array(gameField.tBodies[0].rows[0].cells.length).fill(0),\n);\n\nconst Game = require('../modules/Game.class');\nconst game = new Game(initialState, gameField.tBodies[0], scoreField);\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    game.start();\n\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.innerText = 'Restart';\n\n    startMessage.classList.add('hidden');\n  } else if (button.classList.contains('restart')) {\n    game.restart();\n\n    button.classList.remove('restart');\n    button.classList.add('start');\n    button.innerText = 'Start';\n\n    startMessage.classList.remove('hidden');\n    winMessage.classList.add('hidden');\n    loseMessage.classList.add('hidden');\n  }\n\n  game.updateGameBoard();\n});\n\nsetupInputOnce();\n\nfunction setupInputOnce() {\n  window.addEventListener('keydown', handleInput, { once: true });\n  setupTouchControls();\n}\n\nfunction handleInput(e) {\n  switch (e.key) {\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    default:\n      setupInputOnce();\n\n      return;\n  }\n\n  updateGame();\n}\n\nfunction setupTouchControls() {\n  let touchStartX = 0;\n  let touchStartY = 0;\n  let touchEndX = 0;\n  let touchEndY = 0;\n\n  const threshold = 50;\n\n  window.addEventListener(\n    'touchstart',\n    (e) => {\n      touchStartX = e.touches[0].clientX;\n      touchStartY = e.touches[0].clientY;\n    },\n    { once: true },\n  );\n\n  window.addEventListener(\n    'touchend',\n    (e) => {\n      touchEndX = e.changedTouches[0].clientX;\n      touchEndY = e.changedTouches[0].clientY;\n\n      handleSwipe();\n    },\n    { once: true },\n  );\n\n  function handleSwipe() {\n    const deltaX = touchEndX - touchStartX;\n    const deltaY = touchEndY - touchStartY;\n\n    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n      if (deltaX > threshold) {\n        game.moveRight();\n      } else if (deltaX < -threshold) {\n        game.moveLeft();\n      }\n    } else {\n      if (deltaY > threshold) {\n        game.moveDown();\n      } else if (deltaY < -threshold) {\n        game.moveUp();\n      }\n    }\n\n    updateGame();\n  }\n}\n\nfunction updateGame() {\n  game.updateGameBoard();\n\n  const resultStatus = game.getStatus();\n\n  if (resultStatus === Game.STATUSES.win) {\n    winMessage.classList.remove('hidden');\n  }\n\n  if (resultStatus === Game.STATUSES.lose) {\n    loseMessage.classList.remove('hidden');\n  }\n\n  setupInputOnce();\n}\n","'use strict';\n\nclass Game {\n  static STATUSES = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n    gameBoard,\n    scoreField,\n  ) {\n    this.initialState = initialState;\n    this.state = initialState.map((row) => [...row]);\n    this.status = Game.STATUSES.idle;\n    this.score = 0;\n    this.gameBoard = gameBoard;\n    this.scoreField = scoreField;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = Game.STATUSES.playing;\n    this.#addCell();\n    this.#addCell();\n  }\n\n  restart() {\n    this.state = this.initialState.map((row) => [...row]);\n    this.status = Game.STATUSES.idle;\n    this.score = 0;\n  }\n\n  moveLeft() {\n    if (this.status !== Game.STATUSES.playing) {\n      return;\n    }\n\n    let canMoveLeftInGroup = false;\n\n    this.state = this.state.map((row) => {\n      if (!this.#canMoveInGroup(row)) {\n        return row;\n      }\n\n      canMoveLeftInGroup = true;\n\n      return this.#moveCellsInGroup(row);\n    });\n\n    if (canMoveLeftInGroup) {\n      this.#addCell();\n    }\n\n    this.#setStatus();\n  }\n\n  moveRight() {\n    if (this.status !== Game.STATUSES.playing) {\n      return;\n    }\n\n    let canMoveRightInGroup = false;\n\n    this.state = this.state.map((row) => {\n      const rowReversed = [...row].reverse();\n\n      if (!this.#canMoveInGroup(rowReversed)) {\n        return row;\n      }\n\n      canMoveRightInGroup = true;\n\n      return this.#moveCellsInGroup(rowReversed).reverse();\n    });\n\n    if (canMoveRightInGroup) {\n      this.#addCell();\n    }\n\n    this.#setStatus();\n  }\n\n  moveUp() {\n    if (this.status !== Game.STATUSES.playing) {\n      return;\n    }\n\n    let canMoveUpInGroup = false;\n\n    const cellsGroupByColumns = this.#transpose(this.state);\n\n    const updatedCellsGroupByColumns = cellsGroupByColumns.map((row) => {\n      if (!this.#canMoveInGroup(row)) {\n        return row;\n      }\n\n      canMoveUpInGroup = true;\n\n      return this.#moveCellsInGroup(row);\n    });\n\n    this.state = this.#transpose(updatedCellsGroupByColumns);\n\n    if (canMoveUpInGroup) {\n      this.#addCell();\n    }\n\n    this.#setStatus();\n  }\n\n  moveDown() {\n    if (this.status !== Game.STATUSES.playing) {\n      return;\n    }\n\n    let canMoveDownInGroup = false;\n\n    const cellsGroupByColumns = this.#transpose(this.state);\n\n    const updatedCellsGroupByColumns = cellsGroupByColumns.map((row) => {\n      const reversedRow = [...row].reverse();\n\n      if (!this.#canMoveInGroup(reversedRow)) {\n        return row;\n      }\n\n      canMoveDownInGroup = true;\n\n      return this.#moveCellsInGroup(reversedRow).reverse();\n    });\n\n    this.state = this.#transpose(updatedCellsGroupByColumns);\n\n    if (canMoveDownInGroup) {\n      this.#addCell();\n    }\n\n    this.#setStatus();\n  }\n\n  updateGameBoard() {\n    const regex = /field-cell--\\d+/;\n    const currState = this.getState();\n\n    this.scoreField.innerText = this.getScore();\n\n    for (let i = 0; i < currState.length; i++) {\n      for (let j = 0; j < currState.length; j++) {\n        if (currState[i][j] !== 0) {\n          this.gameBoard.rows[i].cells[j].className =\n            `field-cell field-cell--${currState[i][j]}`;\n          this.gameBoard.rows[i].cells[j].innerText = currState[i][j];\n        } else if (\n          currState[i][j] === 0 &&\n          regex.test(this.gameBoard.rows[i].cells[j].className)\n        ) {\n          this.gameBoard.rows[i].cells[j].className = 'field-cell';\n          this.gameBoard.rows[i].cells[j].innerText = '';\n        }\n      }\n    }\n  }\n\n  #addCell() {\n    const coord = this.#getRandomEmptyCell();\n\n    if (coord !== null) {\n      this.state[coord[0]][coord[1]] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  #getEmptyCells() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[0].length; j++) {\n        if (this.state[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    return emptyCells;\n  }\n\n  #getRandomEmptyCell() {\n    const emptyCells = this.#getEmptyCells();\n\n    if (emptyCells.length < 1) {\n      return null;\n    }\n\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n\n    return emptyCells[randomIndex];\n  }\n\n  #transpose(arr) {\n    return arr[0].map((_, colIndex) => arr.map((row) => row[colIndex]));\n  }\n\n  #moveCellsInGroup(group) {\n    const mergedValues = [0, 0, 0, 0];\n\n    for (let i = 1; i < group.length; i++) {\n      if (group[i] === 0) {\n        continue;\n      }\n\n      const cellWithNumIndex = i;\n      let targetCellIndex = null;\n      let j = i - 1;\n\n      while (\n        j >= 0 &&\n        (group[j] === 0 ||\n          (group[j] === group[cellWithNumIndex] && mergedValues[j] !== 1))\n      ) {\n        targetCellIndex = j;\n        j--;\n      }\n\n      if (targetCellIndex === null) {\n        continue;\n      }\n\n      if (group[targetCellIndex] === 0) {\n        group[targetCellIndex] = group[cellWithNumIndex];\n        group[cellWithNumIndex] = 0;\n      } else {\n        group[targetCellIndex] += group[cellWithNumIndex];\n        group[cellWithNumIndex] = 0;\n\n        mergedValues[targetCellIndex] = 1;\n\n        this.score += group[targetCellIndex];\n      }\n    }\n\n    return group;\n  }\n\n  #setStatus() {\n    if (!this.#checkCanMove()) {\n      this.status = Game.STATUSES.lose;\n    }\n\n    if (this.#checkWin()) {\n      this.status = Game.STATUSES.win;\n    }\n  }\n\n  #checkWin() {\n    return this.state.some((row) => {\n      return row.some((cell) => cell === 2048);\n    });\n  }\n\n  #checkCanMove() {\n    const emptyCells = this.#getEmptyCells();\n\n    if (emptyCells.length >= 1) {\n      return true;\n    }\n\n    const canMoveHorisontal = this.state.some((row) => {\n      const reversedRow = [...row];\n\n      if (this.#canMoveInGroup(row) || this.#canMoveInGroup(reversedRow)) {\n        return true;\n      }\n\n      return false;\n    });\n\n    const canMoveVertical = this.#transpose(this.state).some((row) => {\n      const reversedRow = [...row];\n\n      if (this.#canMoveInGroup(row) || this.#canMoveInGroup(reversedRow)) {\n        return true;\n      }\n\n      return false;\n    });\n\n    return canMoveHorisontal || canMoveVertical;\n  }\n\n  #canMoveInGroup(group) {\n    return group.some((cell, index) => {\n      if (index === 0) {\n        return false;\n      }\n\n      if (cell === 0) {\n        return false;\n      }\n\n      if (group[index - 1] === 0) {\n        return true;\n      }\n\n      if (group[index] === group[index - 1]) {\n        return true;\n      }\n\n      return false;\n    });\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$gameField","document","querySelector","$09e991522ca7e64e$var$scoreField","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$button","$09e991522ca7e64e$var$initialState","Array","from","length","tBodies","rows","cells","fill","$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","STATUSES","idle","playing","win","lose","constructor","initialState","gameBoard","scoreField","state","map","row","status","score","getScore","getState","getStatus","start","restart","moveLeft","canMoveLeftInGroup","moveRight","canMoveRightInGroup","rowReversed","reverse","moveUp","canMoveUpInGroup","updatedCellsGroupByColumns","cellsGroupByColumns","moveDown","canMoveDownInGroup","reversedRow","updateGameBoard","regex","currState","innerText","i","j","className","test","coord","Math","random","emptyCells","push","randomIndex","floor","arr","_","colIndex","group","mergedValues","cellWithNumIndex","targetCellIndex","some","cell","canMoveHorisontal","canMoveVertical","index","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$setupInputOnce","touchStartX","touchStartY","touchEndX","touchEndY","window","addEventListener","$09e991522ca7e64e$var$handleInput","once","e","touches","clientX","clientY","changedTouches","handleSwipe","deltaX","deltaY","abs","$09e991522ca7e64e$var$updateGame","key","resultStatus","classList","remove","contains","add"],"version":3,"file":"index.eb7e8976.js.map"}